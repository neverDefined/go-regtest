name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  code-quality:
    name: Code Quality (Go ${{ matrix.go-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.23', '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Install development tools
      run: make install-tools

    - name: Run linting
      run: make lint

    - name: Run formatting check
      run: make fmt

    - name: Run vet
      run: make vet

    - name: Check dependencies
      run: make verify

  integration-tests:
    name: Integration Tests (Go ${{ matrix.go-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.23', '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Install Bitcoin Core
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          # Use snap for reliable installation across Ubuntu versions
          sudo snap install bitcoin-core
          # Create symlinks for standard paths
          sudo ln -sf /snap/bitcoin-core/current/bin/bitcoind /usr/local/bin/bitcoind
          sudo ln -sf /snap/bitcoin-core/current/bin/bitcoin-cli /usr/local/bin/bitcoin-cli
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install bitcoin
        fi
      shell: bash

    - name: Verify Bitcoin Core installation
      run: |
        which bitcoind
        bitcoind --version

    - name: Install development tools
      run: make install-tools

    - name: Run integration tests
      run: make test

    - name: Run tests with race detector
      run: make test-race

  coverage-tests:
    name: Coverage Tests (Go ${{ matrix.go-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.23', '1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Install Bitcoin Core
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          # Use snap for reliable installation across Ubuntu versions
          sudo snap install bitcoin-core
          # Create symlinks for standard paths
          sudo ln -sf /snap/bitcoin-core/current/bin/bitcoind /usr/local/bin/bitcoind
          sudo ln -sf /snap/bitcoin-core/current/bin/bitcoin-cli /usr/local/bin/bitcoin-cli
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install bitcoin
        fi
      shell: bash

    - name: Verify Bitcoin Core installation
      run: |
        which bitcoind
        bitcoind --version

    - name: Install development tools
      run: make install-tools

    - name: Run coverage tests
      run: make test-coverage-check

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      run: |
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Percentage" >> $GITHUB_STEP_SUMMARY
        COVERAGE=$(go tool cover -func=coverage.out | tail -1 | awk '{print $3}' | sed 's/%//')
        echo "**Total Coverage: ${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Threshold Check" >> $GITHUB_STEP_SUMMARY
        COVERAGE_INT=$(echo "$COVERAGE" | cut -d. -f1)
        if [ "$COVERAGE_INT" -lt 70 ]; then
          echo "FAIL: **Coverage ${COVERAGE}% is below 70% threshold**" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "PASS: **Coverage ${COVERAGE}% meets 70% threshold**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload coverage artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-go${{ matrix.go-version }}
        path: |
          coverage.out
          coverage.html
        retention-days: 30

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, integration-tests, coverage-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: CI Summary
      run: |
        echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage Tests**: ${{ needs.coverage-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Overall Status" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.code-quality.result }}" == "success" ] && [ "${{ needs.integration-tests.result }}" == "success" ] && [ "${{ needs.coverage-tests.result }}" == "success" ]; then
          echo "PASS: **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "FAIL: **Some tests failed. Please check the logs above.**" >> $GITHUB_STEP_SUMMARY
        fi

